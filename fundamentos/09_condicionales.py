"""
EN PYTHON, LOS CONDICIONALES SON ESTRUCTURAS DE CONTROL QUE PERMITEN TOMAR DECISIONES BASADAS EN EL RESULTADO DE UNA EXPRESIÓN LÓGTICA. 
ESTOS CONDICIONALES SE IMPLEMENTAN PRINCIPALMENTE A TRAVÉS DE LAS DECLARACIONES 'IF' 'ELIF' Y 'ELSE'
 EL FORMATO GENERAL DE UN CONDICIONAL ES EL SIGUIENTE: 

IF(condicion):
    EJECUTO EL CODIGO QUE SEA
ELIF(condicion):
    EJECUTO EL CODIGO QUE SEA
ELSE:
    EJECUTO EL CODIGO QUE SEA

ALGO MUY IMPORTANTE EN PYTHON ES LA INDENTACIÓN DE CÓDGIO DENTRO DE LOS CONDICIONALES, ESTE DEBE ESTAR CON UN NIVEL DE SANGRÍA CONSISTENTE PARA QUE SEA CONSIDERADO PARTE DEL BLOQUE
YA QUE NO HAY {}[] QUE DELIMITEN LAS CONDICIONES COMO EN OTROS LENGJUAJES JAVA, C, C++, EN PYTHON ES MUY IMPORTANTE EL TABULADO DE CÓDIGO
"""

#EJEMPLO 1 CONDICIONAL: SÓLO UNA CLAUSULA IF A MODO DE COMPROBACIÓN

numero = 2
if(numero % 2 == 0):
    print("El numero es par")

#EN ESTE CASO USO EL IF PARA HACER UNA COMPROBACIÓN, SI SE CUMPLE MUESTRO UN PRINT 

#EJEMPLO 2 CONDICIONAL: CLAUSULA IF Y CLAUSULA ELSE

numero = 3
if(numero % 2 == 0):
    print("El numero es par")
else:
    print("El numero es impar")

#EN ESTE CASO, SE COMPRUEBA LA PRIMERA CONDICION QUE EL NUMERO SEA PAR, SI NO SE CUMPLE IREMOS POR EL ELSE, QUE ES QUE NO SEA PAR, ES DECIR, IMPAR
#SI UN CONDICIONAL NO ENTRA POR EL IF, SIEMPRE VA A ENTRAR AL ELSE

#EJEMPLO 3 CONDICIONAL: CLAUSULA IF, ELIF Y ELSE

numero = 0
if(numero > 0):
    print("El numero es positivo")
elif(numero < 0):
    print("El numero es negativo")
else:
    print("El numero es 0")

#ES ESTE CASO USAMOS ELIF, QUE NOS SIRVE PARA AÑADIR TODAS LAS CONDICIONES QUE QUEREMOS COMPROBAR, ESTAS SE EJECUTAN DE FORMA SECUENCIAL, SEGÚN EL ORDEN EN EL QUE ESTEN ESCRITAS
#ELIF PUEDE UTILIZARSE SIEMPRE Y FUNCIONARÁ SI ESTÁN BIEN ORDENADAS, PERO LA GUÍA DE BUENAS PRÁCTICAS DICE QUE CUANDO TENGAMOS MUCHOS CASOS Y LA VIABILIDAD DEL PROYECTO LO PERMITA
#LA GENTE QUE VAYA A LEER EL CÓDGIO ETC, PODEMOS HACER USO DEL OPERADOR MATCH

codigo_error = 404

match codigo_error:
    case 200:
        print("Todo ha salido ok")
    case 301:
        print("Movimiento permanente de la página")
    case 404:
        print("Pagina no encontrada")
    case 500:
        print("Error interno del servidor")
    case _:
        print("Error no disponible")

"""
LAS VENTAJAS DEL OPERADOR MATCH FRENTE A LAS SENTENCIAS IF ELIF ELSE SON LAS SIGUIENTES:
1. CLARIDAD Y LEGIBILIDAD DEL CÓDIGO. CUANDO TIENES MÚLTIPLES CONDICIONES PARA EVALUAR, ESPECIALMENTE CUANDO SE TRATA DE VALORES DISCRETOS O CONSTANTES
EL USO DE MATCH PUEDE HACER QUE TU CÓDIGO SEA MÁS CLARO Y LEGIBLE. ESTA ESTRUCTURA ESTÁ DISEÑADA ESPECIFICAMENTE PARA MANEJAR MULTIPLES CASO Y OPCIONES.
2. EFICIENCIA. EN ALGUNOS LENGUAJES DE PROGRAMACIÓN EN TÉRMINOS DE RENDIMIENTO ES MÁS EFICIENTE. ESTO SE DEBE A QUE MATCH PUEDE GENERAR UNA TABLA DE BÚSQUEDA EN 
TIEMPO DE COMPILACIÓN, LO QUE PERMITE UN ACCESO DIRECTO AL CASO CORRECTO SIN NECESIDAD DE EVALUAR CADA CONDICIÓN SECUENCIALMENTE.
3. MAYOR ESCALABILIDAD. A MEDIDA QUE EL NÚMERO DE CONDICIONES AUMENTA LA ESTRUCUTRA IF Y SUS MULTIPLES SENTENCIAS PUEDEN VOLVERSE ENGORROSAS Y DIFICILES DE COMPRENDER.
ESTA ESTRUCUTRA MATCH ES MUCHO MÁS ESCALABLE Y SE PUEDEN AÑADIR MÁS CASO SIN TENER QUE MODIFICAR EL CÓDIGO EXISTENTE.
"""

